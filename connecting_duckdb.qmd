---
title: "Connecting DuckDB"
author: "Leilanie Rubinstein"
format: html
editor_options: 
  chunk_output_type: inline
---

```{r}
library(tidyverse)
library(DBI)
library(duckdb)
```

Let's connect to our database

```{r}
# Pass this connection into all the functions
conn <- DBI::dbConnect(duckdb::duckdb(), dbdir = "database/database.db")
```

Let's look at our tables

```{r}
DBI::dbListTables(conn)
```

Look at an entire table

```{r}
species <- tbl(conn, "Species")
species
```

## Let's do our first query

```{r}
species_a <- dbGetQuery(conn, "SELECT * FROM Species WHERE Code LIKE '%a'")

# This time, the result is a dataframe
species_a
```

### There is a better way

```{r}
library(dbplyr)
```

```{r}
# Can apply tidyverse code to databases
species_study <- species %>%
  filter(Relevance == "Study species") %>%
  select(Code, Scientific_name)
```

```{r}
class(species_study)
dim(species_study)
```

### Can I group?

```{r}
species %>%
  group_by(Relevance) %>%
  summarise(num_species = n()) %>%
  show_query()
```
`show_query()` shows the corresponding SQL query

## You can also mutate

```{r}
species %>%
  mutate(Code_x = paste0("X", Code)) %>%
  show_query()
```

This is only adding the column in the R environment, not the actual database.

## How do we get the full data?

`collect()` computes the results of a query. Be careful with this!

```{r}
species_X <- species %>%
  mutate(Code_x = paste0("X", Code)) %>%
  collect()
```

## You can do joins!

```{r}
eggs_db <- tbl(conn, "Bird_eggs")
nests_db <- tbl(conn, "Bird_nests")
```

```{r}
nest_eggs_df <- left_join(nests_db, eggs_db, by = "Nest_ID", keep = FALSE) %>%
  collect()
```

## Don't forget to close the database connection

```{r}
DBI::dbDisconnect(conn, shutdown = TRUE)
```





